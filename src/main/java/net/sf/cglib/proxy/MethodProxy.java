/*
 * Copyright 2003,2004 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.cglib.proxy;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import net.sf.cglib.core.AbstractClassGenerator;
import net.sf.cglib.core.CodeGenerationException;
import net.sf.cglib.core.GeneratorStrategy;
import net.sf.cglib.core.NamingPolicy;
import net.sf.cglib.core.Signature;
import net.sf.cglib.reflect.FastClass;

/**
 * Classes generated by {@link Enhancer} pass this object to the
 * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can
 * be used to either invoke the original method, or call the same method on a different
 * object of the same type.
 * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $
 */
public class MethodProxy {
    private Signature sig1;
    private Signature sig2;
    private CreateInfo createInfo;
    
    private final Object initLock = new Object();
    private volatile FastClassInfo fastClassInfo;
    
    /**
     * For internal use by {@link Enhancer} only; see the {@link net.sf.cglib.reflect.FastMethod} class
     * for similar functionality.
     */
    // 20201113 初始化MethodProxy成员变量
    public static MethodProxy create(Class c1, Class c2, String desc, String name1, String name2) {
        MethodProxy proxy = new MethodProxy();
        proxy.sig1 = new Signature(name1, desc);// 20201113 设置原委托类equals()方法的方法签名
        proxy.sig2 = new Signature(name2, desc);// 20201113 设置代理类CGLIB$equals$1()方法的方法签名
        proxy.createInfo = new CreateInfo(c1, c2);// 20201113 初始化当前线程的ClassGenerator -> Enhancer
        return proxy;
    }

    // 20201113 初始化FastClass
    private void init()
    {
        // 20201113 使用volatile FastClassInfo使我们能够原子地初始化FastClass
        /*
         * Using a volatile invariant allows us to initialize the FastClass and
         * method index pairs atomically.
         * 
         * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this 
         * code could allow fastClassInfo to be instantiated more than once, which
         * appears to be benign.
         */
        if (fastClassInfo == null)
        {
            // 20201113 初始化FastClass时加锁, 双重检查锁保证线程安全
            synchronized (initLock)
            {
                if (fastClassInfo == null)
                {
                    CreateInfo ci = createInfo;

                    FastClassInfo fci = new FastClassInfo();// 20201113 持有生成FastClass的参数
                    fci.f1 = helper(ci, ci.c1);// 20201113 生册原委托类的FastClass
                    fci.f2 = helper(ci, ci.c2);// 20201113 生成代理类的FastClass
                    fci.i1 = fci.f1.getIndex(sig1); // 20201113 根据原委托类equals()的方法签名获取方法在FastClass索引
                    fci.i2 = fci.f2.getIndex(sig2);// 20201113 根据代理类CGLIB$equals$1()方法的方法签名获取方法FastClass索引
                    fastClassInfo = fci;// 20201113 设置FastClass成员变量
                    createInfo = null;
                }
            }
        }
    }

    // 20201113 MethodProxy根据loadClass2和loadClass1进行分析并生成FastClass, 然后再使用getIndex()来获取equals()方法和CGLIB$equals$1()代理方法的索引
    private static class FastClassInfo
    {
        FastClass f1;// 20201113 原委托类的FastClass
        FastClass f2;// 20201113 代理类的FastClass
        int i1;// 20201113 equals()方法在f1中的索引
        int i2;// 20201113 CGLIB$equals$1()方法在f2中的索引
    }

    private static class CreateInfo
    {
        Class c1;
        Class c2;
        NamingPolicy namingPolicy;
        GeneratorStrategy strategy;
        boolean attemptLoad;
        
        public CreateInfo(Class c1, Class c2)
        {
            this.c1 = c1;
            this.c2 = c2;
            AbstractClassGenerator fromEnhancer = AbstractClassGenerator.getCurrent();// 20201113 获取当前线程的ClassGenerator -> Enhancer
            if (fromEnhancer != null) {
                namingPolicy = fromEnhancer.getNamingPolicy();// 20201113 默认命名策略
                strategy = fromEnhancer.getStrategy();// 20201113 默认生成策略
                attemptLoad = fromEnhancer.getAttemptLoad();// 20201113 尝试加载标志
            }
        }
    }

    private static FastClass helper(CreateInfo ci, Class type) {
        FastClass.Generator g = new FastClass.Generator();// 20201113 获取FastClss的Class Generator
        g.setType(type);// 20201113 设置类型
        g.setClassLoader(ci.c2.getClassLoader());// 20201113 设置类加载器
        g.setNamingPolicy(ci.namingPolicy);// 20201113 设置命名策略
        g.setStrategy(ci.strategy);// 20201113 设置生成策略
        g.setAttemptLoad(ci.attemptLoad);// 20201113 尝试加载标志
        return g.create();// 20201113 生成对应FastClass
    }

    private MethodProxy() {
    }

    /**
     * Return the signature of the proxied method.
     */
    public Signature getSignature() {
        return sig1;
    }

    /**
     * Return the name of the synthetic method created by CGLIB which is
     * used by {@link #invokeSuper} to invoke the superclass
     * (non-intercepted) method implementation. The parameter types are
     * the same as the proxied method.
     */
    public String getSuperName() {
        return sig2.getName();
    }

    /**
     * Return the {@link net.sf.cglib.reflect.FastClass} method index
     * for the method used by {@link #invokeSuper}. This index uniquely
     * identifies the method within the generated proxy, and therefore
     * can be useful to reference external metadata.
     * @see #getSuperName
     */
    public int getSuperIndex() {
        init();
        return fastClassInfo.i2;
    }

    // For testing
    FastClass getFastClass() {
      init();
      return fastClassInfo.f1;
    }

    // For testing
    FastClass getSuperFastClass() {
      init();
      return fastClassInfo.f2;
    }

    /**
     * Return the <code>MethodProxy</code> used when intercepting the method
     * matching the given signature.
     * @param type the class generated by Enhancer
     * @param sig the signature to match
     * @return the MethodProxy instance, or null if no applicable matching method is found
     * @throws IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor
     */
    public static MethodProxy find(Class type, Signature sig) {
        try {
            Method m = type.getDeclaredMethod(MethodInterceptorGenerator.FIND_PROXY_NAME,
                                              MethodInterceptorGenerator.FIND_PROXY_TYPES);
            return (MethodProxy)m.invoke(null, new Object[]{ sig });
        } catch (NoSuchMethodException e) {
            throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");
        } catch (IllegalAccessException e) {
            throw new CodeGenerationException(e);
        } catch (InvocationTargetException e) {
            throw new CodeGenerationException(e);
        }
    }

    /**
     * Invoke the original method, on a different object of the same type.
     * @param obj the compatible object; recursion will result if you use the object passed as the first
     * argument to the MethodInterceptor (usually not what you want)
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invoke(Object obj, Object[] args) throws Throwable {
        try {
            init();
            FastClassInfo fci = fastClassInfo;
            return fci.f1.invoke(fci.i1, obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (IllegalArgumentException e) {
            if (fastClassInfo.i1 < 0)
                throw new IllegalArgumentException("Protected method: " + sig1);
            throw e;
        }
    }

    /**
     * Invoke the original (super) method on the specified object.
     * @param obj the enhanced object, must be the object passed as the first
     * argument to the MethodInterceptor
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    // 20201113 MyMethodHandler实现类调用invokeSuper方法
    // => 代理类通过调用持有MethodInterceptor实现类引用的intercept(), 然后调用methodProxy.invokeSuper()根据FastClass索引调用到代理类的增强方法,
    // 增强方法则又调用父类的equals(), 对比JDK动态代理中, 代理类通过调用InvocationHandler中的invoke(), 然后再反射调用原委托类的equals(),
    // 可以避免了反射调用, 提高了效率
    public Object invokeSuper(Object obj, Object[] args) throws Throwable {
        try {
            // 20201113 初始化FastClass
            init();
            FastClassInfo fci = fastClassInfo;

            // 20201113 实际是调用对应代理类的FastClass f2的invoke方法, invoke方法则调用代理类的CGLIB$equals$1(), CGLIB$equals$1()则又是直接调用原委托类的equals方法
            return fci.f2.invoke(fci.i2, obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }
}
